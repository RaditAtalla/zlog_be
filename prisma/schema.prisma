// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Jabatan {
  PM
  SEM
  POP
  LOGISTIK
  PENBAR
  SOM
  GSP
  SP
  ARK
  QCO
  HSEO
  SAK
  SE
}

enum ApprovalStatus {
  APPROVED
  NOT_APPROVED
  WAITING
}

model User {
  id         Int          @id @default(autoincrement())
  nama       String
  nomorHp    String       @unique
  email      String       @unique
  password   String
  jabatan    Jabatan
  picProject PicProject?
  sppCreated DataSpp[]    @relation("sppCreatedByUser")
  sppAcc1    Project[]    @relation("sppAcc1")
  sppAcc2    Project[]    @relation("sppAcc2")
  Bppb       Bppb[]       @relation("bppbCreatedByUser")
}

model Project {
  id         Int          @id @default(autoincrement())
  kode       Int
  nama       String
  lokasi     String
  picProject PicProject[]
  dataSpp    DataSpp[]
  sppAcc1Id  Int
  sppAcc1    User         @relation("sppAcc1", fields: [sppAcc1Id], references: [id])
  sppAcc2Id  Int
  sppAcc2    User         @relation("sppAcc2", fields: [sppAcc2Id], references: [id])
  bppb       Bppb[]
}

model PicProject {
  id        Int     @id @default(autoincrement())
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id])
}

model DetailSpp {
  id          Int     @id @default(autoincrement())
  material    String
  spesifikasi String
  volume      Int
  satuan      String
  lokasi      String
  dataSppId   Int
  dataSpp     DataSpp @relation(fields: [dataSppId], references: [id])
}

model DataSpp {
  id              Int            @id @default(autoincrement())
  projectId       Int
  project         Project        @relation(fields: [projectId], references: [id])
  kode            String         @unique
  createdAt       DateTime       @default(now())
  createdByUserId Int
  createdByUser   User           @relation("sppCreatedByUser", fields: [createdByUserId], references: [id])
  acc2Status      ApprovalStatus @default(WAITING)
  acc1Status      ApprovalStatus @default(WAITING)
  sppStatus       ApprovalStatus @default(WAITING)
  detailSpp       DetailSpp[]
}

model Material {
  id             Int    @id @default(autoincrement())
  nama           String
  satuan         String
  ukuran         String
  jenisPekerjaan String
}

model GoodsReceipt {
  id                 Int                  @id @default(autoincrement())
  noMaterialMasuk    Int
  noSuratJalan       String
  tanggalMasuk       DateTime
  vendor             String
  namaPengantar      String
  goodsReceiptDetail GoodsReceiptDetail[]
}

model GoodsReceiptDetail {
  id             Int          @id @default(autoincrement())
  goodsReceiptId Int
  goodsReceipt   GoodsReceipt @relation(fields: [goodsReceiptId], references: [id])
  material       String
  spesifikasi    String
  volume         Int
  satuan         String
}

model Bppb {
  id              Int            @id @default(autoincrement())
  projectId       Int
  project         Project        @relation(fields: [projectId], references: [id])
  kode            String         @unique
  createdAt       DateTime       @default(now())
  createdByUserId Int
  createdByUser   User           @relation("bppbCreatedByUser", fields: [createdByUserId], references: [id])
  namaPekerja     String
  accStatus       ApprovalStatus @default(WAITING)
  detailBppb      DetailBppb[]
}

model DetailBppb {
  id          Int    @id @default(autoincrement())
  bppbId      Int
  bppb        Bppb   @relation(fields: [bppbId], references: [id])
  material    String
  spesifikasi String
  volume      Int
  satuan      String
  lokasi      String
}
